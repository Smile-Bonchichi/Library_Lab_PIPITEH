#include <iostream>
#include <ctime>
#include <fstream>
#include <string>
#include "Windows.h"
#include <time.h>
#include <iomanip>
#include "conio.h"

#include "color.h"
#define str string

using namespace std;

bool check_number(str s) { //функция для проверки введенного символа
    if (atoi(s.c_str()) || s == "0")
        return true;
    else return false;
}

struct info {
    str name = " ";
    int bonus = 0;
    str car = " ";
    int option = 0;
    int salary = 0;
};

class Employee {
protected:
    str name;
    str position;
    int salary;
private:
    void Wages() {
        blue("      " + to_string(salary * 12)); gray(" | ");
    }
public:
    Employee() {
        salary = 0;
    }
    Employee(str name, str pos, int salary) {
        this->name = name;
        this->position = pos;
        this->salary = salary;
    }
    void outputBase() {
        gray("| "); cout << "  "; blue(name); gray(" | "); cout << "  "; blue(position); gray(" | ");
        Wages();
    }
};

class Manager : private Employee {
    double annual_bonus;
    str company_car;
    int stock_options;
public:
    Manager() : Employee() {
        annual_bonus = 0.0;
        stock_options = 0;
    }
    Manager(str name, int bonus, str car, int options, int salary) : Employee(name, "Manager", salary) {
        this->annual_bonus = bonus;
        this->company_car = car;
        this->stock_options = options;
    }
    void output() {
        outputBase();
        blue("     " + to_string(annual_bonus) + " %"); gray(" | ");
        cout << setw(15); blue(company_car); gray(" | "); cout << setw(16); blue(to_string(stock_options)); gray(" |\n");
    }
    void setName(str name) {
        this->name = name;
    }
    Employee::outputBase;
};

void main_menu() {
    magenta("                     ,---.           ,---.   \n");
    magenta("                    / /^`.\\.--''''-./,'^\\ \\ \n");
    magenta("                    \\ \\    _       _    / /  "); red("\t\t\t\t\t\tГлавное Меню:\t\t\n");
    magenta("                     `./  / __   __ \\  \\,'   \n");
    magenta("                      /    /_O)_(_O\\    \\     "); green("\t\t\t\t\t1. Добавить нового менеждера\t\n");
    magenta("                      |  .-'  ___  `-.  |  \n");
    magenta("                   .--|       \\_/       |--.  "); green("\t\t\t\t\t2. Вывести список менеджеров\t\n");
    magenta("                 ,'    \\   \\   |   /   /    `.\n");
    magenta("                /       `.  `--^--'  ,'       \\"); green("\t\t\t\t\t3. Удалить последнего менеджера\t\t\n");
    magenta("             .-^^^^^-.    `--.___.--'     .-^^^^^-.\n");
    magenta(".-----------/         \\------------------/         \\--------------."); green("\t\t4. Выход\t\t\t\n");
    magenta("| .---------\\         /----------------- \\         /------------. |\n");
    magenta("| |          `-`--`--'                    `--'--'-'             | |\n");
    magenta("| |   "); cyan("__      __   ___  | |   ___    ___    _ __ ___     ___"); magenta("    | |\n");
    magenta("| |   "); cyan("\\ \\ /\\ / /  / _ \\ | |  / __|  / _ \\  | '_ ` _ \\   / _ \\"); magenta("   | |\n");
    magenta("| |    "); cyan("\\ V  V /  |  __/ | | | (__  | (_) | | | | | | | |  __/"); magenta("   | |\n");
    magenta("| |     "); cyan("\\_/\\_/    \\___| |_|  \\___|  \\___/  |_| |_| |_|  \\___|"); magenta("   | |\n");
    magenta("| |_____________________________________________________________| |\n");
    magenta("|_________________________________________________________________|\n");
    magenta("                   )__________|__|__________(\n");
    magenta("                  |            ||            |\n");
    magenta("                  |____________||____________|\n");
    magenta("                    ),-----.(      ),-----.(\n");
    magenta("                  ,'   ==.   \\    /  .==    `.\n");
    magenta("                 /            )  (            \\\n");
    magenta("                 `==========='    `==========='  \n");
}
void main_menu1() {
    magenta("                     ,---.           ,---.   \n");
    magenta("                    / /^`.\\.--''''-./,'^\\ \\ \n");
    magenta("                    \\ \\    _       _    / /  "); red("\t\t\t\t\t\tГлавное Меню:\t\t\n");
    magenta("                     `./  / __   __ \\  \\,'   \n");
    magenta("                      /    /_O)_(_O\\    \\     "); green("\t\t\t\t\t1. Добавить нового менеждера\t\n");
    magenta("                      |  .-'  ___  `-.  |  \n");
    magenta("                   .--|       \\_/       |--.  "); green("\t\t\t\t\t2. Вывести список менеджеров\t\n");
    magenta("                 ,'    \\   \\   |   /   /    `.\n");
    magenta("                /       `.  `--^--'  ,'       \\"); green("\t\t\t\t\t3. Удалить последнего менеджера\t\t\n");
    magenta("             .-^^^^^-.    `--.___.--'     .-^^^^^-.\n");
    magenta(".-----------/         \\------------------/         \\--------------."); green("\t\t4. Выход\t\t\t\n");
    magenta("| .---------\\         /----------------- \\         /------------. |\n");
    magenta("| |          `-`--`--'                    `--'--'-'             | |\n");
    magenta("| |   "); red("__      __   ___  | |   ___    ___    _ __ ___     ___"); magenta("    | |\n");
    magenta("| |   "); red("\\ \\ /\\ / /  / _ \\ | |  / __|  / _ \\  | '_ ` _ \\   / _ \\"); magenta("   | |\n");
    magenta("| |    "); red("\\ V  V /  |  __/ | | | (__  | (_) | | | | | | | |  __/"); magenta("   | |\n");
    magenta("| |     "); red("\\_/\\_/    \\___| |_|  \\___|  \\___/  |_| |_| |_|  \\___|"); magenta("   | |\n");
    magenta("| |_____________________________________________________________| |\n");
    magenta("|_________________________________________________________________|\n");
    magenta("                   )__________|__|__________(\n");
    magenta("                  |            ||            |\n");
    magenta("                  |____________||____________|\n");
    magenta("                    ),-----.(      ),-----.(\n");
    magenta("                  ,'   ==.   \\    /  .==    `.\n");
    magenta("                 /            )  (            \\\n");
    magenta("                 `==========='    `==========='  \n");
}
void addM(Manager*& manager, int& n, info tempInfo) {
    Manager* temp = new Manager[n];

    for (int i = 0; i < n; i++)
        temp[i] = manager[i];

    n++; manager = new Manager[n];
    manager[n - 1] = Manager(tempInfo.name, tempInfo.bonus, tempInfo.car, tempInfo.option, tempInfo.salary);

    for (int i = 0; i < n - 1; i++)
        manager[i] = temp[i];

    delete[]temp;
}

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    info temp; fstream sin; int n;
    sin.open("5\\manager.txt"); sin >> n;
    Manager* manager = new Manager[n];

    for (int i = 0; i < n; i++) {
        sin.ignore();
        getline(sin, temp.name);
        sin >> temp.bonus >> temp.car >> temp.option >> temp.salary;
        manager[i] = Manager(temp.name, temp.bonus, temp.car, temp.option, temp.salary);
    }
    sin.close();
    
    bool f = true; str s;
    while (f) {
        while (!_kbhit()) {
            main_menu();
            system("cls");
            main_menu1();
            system("cls");
        }
        main_menu();
        cin >> s;
        system("cls");
        if (!check_number(s))
            cout << "Вы ввели не число!!!" << endl;
        else {
            switch (atoi(s.c_str())) {
            case 1:
                cout << "Введите "; red("имя"); cout << " нового Менеджера: "; cin.ignore();
                getline(cin, temp.name);
                cout << "Введите "; red("ежегодный бонус"); cout << " нового Менеджера: "; cin >> temp.bonus;
                cout << "Введите "; red("машину"); cout << " нового Менеджера: "; cin >> temp.car;
                cout << "Введите "; red("опционы на акции"); cout << "нового Менеджера : "; cin >> temp.option;
                cout << "Введите "; red("З / П"); cout << " нового Менеджера : "; cin >> temp.salary;
                system("cls"); addM(manager, n, temp);
                break;
            case 2:
                gray("_____________________________________________________________________________________________________\n");
                gray("|       ФИО       | Должность | З/П за месяц | Ежегодный бонус | Машина компании | Опционы на акции |\n");
                gray("|-----------------|-----------|--------------|-----------------|-----------------|------------------|\n");
                for (int i = 0; i < n; i++)
                    manager[i].output();
                gray("-----------------------------------------------------------------------------------------------------\n");
                cin.ignore(); getline(cin, s);
                break;
            case 3: n--; break;
            case 4: f = false; break;
            default: yellow("Такой операции не существует!!!\nВведите заново.\n"); break;
            }
        }
    }
    delete[]manager;
    return 0;
}